import numpy as np

class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        # Initialize weights and biases
        self.weights_input_hidden = np.random.randn(input_size, hidden_size)
        self.bias_hidden = np.zeros((1, hidden_size))
        self.weights_hidden_output = np.random.randn(hidden_size, output_size)
        self.bias_output = np.zeros((1, output_size))
        
    def forward(self, X):
        # Forward pass
        self.hidden_input = np.dot(X, self.weights_input_hidden) + self.bias_hidden
        self.hidden_output = self.sigmoid(self.hidden_input)
        self.final_input = np.dot(self.hidden_output, self.weights_hidden_output) + self.bias_output
        self.final_output = self.sigmoid(self.final_input)
        return self.final_output
    
    def sigmoid(self, z):
        return 1 / (1 + np.exp(-z))
    
    def sigmoid_derivative(self, z):
        return z * (1 - z)

    def compute_loss(self, y_true, y_pred):
        return np.mean(np.square(y_true - y_pred))  # Mean Squared Error

    def backward(self, X, y, learning_rate):
        # Backward pass
        output_loss = 2 * (self.final_output - y) / y.size
        hidden_loss = output_loss.dot(self.weights_hidden_output.T) * self.sigmoid_derivative(self.hidden_output)

        # Update weights and biases
        self.weights_hidden_output -= self.hidden_output.T.dot(output_loss) * learning_rate
        self.bias_output -= np.sum(output_loss, axis=0, keepdims=True) * learning_rate
        self.weights_input_hidden -= X.T.dot(hidden_loss) * learning_rate
        self.bias_hidden -= np.sum(hidden_loss, axis=0, keepdims=True) * learning_rate

    def train(self, X, y, epochs, learning_rate):
        for epoch in range(epochs):
            for i in range(X.shape[0]):  # Loop over each sample
                self.forward(X[i:i+1])  # Forward pass
                self.backward(X[i:i+1], y[i:i+1], learning_rate)  # Backward pass
            if epoch % 100 == 0:  # Print loss every 100 epochs
                loss = self.compute_loss(y, self.forward(X))
                print(f'Epoch {epoch}, Loss: {loss}')

# Example usage
if __name__ == "__main__":
    # Generate some synthetic data
    np.random.seed(42)
    X = np.random.rand(1000, 2)  # 1000 samples, 2 features
    y = (X[:, 0] + X[:, 1] > 1).astype(np.float32).reshape(-1, 1)  # Simple binary target

    # Create neural network
    nn = NeuralNetwork(input_size=2, hidden_size=4, output_size=1)

    # Train the network36+
    nn.train(X, y, epochs=1000, learning_rate=0.01)
